# generated by fastapi-codegen:
#   filename:  geoapp.yaml
#   timestamp: 2023-07-13T20:26:30+00:00

from __future__ import annotations
import uvicorn
from typing import List, Union, Annotated
from pydantic import BaseModel
from fastapi import Body
from fastapi import FastAPI, Path, Depends,  UploadFile, Form, File,Request, HTTPException, status
#from typing import Annotated
import os
import time
from fastapi.middleware.cors import CORSMiddleware
from controllers import getController, Controller
from models import (
    ApiResponse,
    PostMessage,
    ErrorType,
    PostLoadImage,
)
from fastapi.responses import FileResponse

from logger import Logger
logger = Logger("app")
DATABASE = (os.getenv("APP_DB") or "Mock")
VERSION = (os.getenv("APP_VERSION") or "1.0.0")

controller = getController(DATABASE)
logger.info(f"Application backend starting with db {DATABASE} and version: {VERSION}")
app = FastAPI(
    title='app',
    version=VERSION,
    description='simple  application',
    app_controller = controller
)

origins = [
    "http://localhost.tiangolo.com",
    "https://localhost.tiangolo.com",
    "http://localhost",
    "http://localhost:3000",
]

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
   allow_methods=["*"],
    allow_headers=["*"],
)

def requestController(app_name: str):
    """Get a decorator represented a controller to connect to database
    Args:
        app_name: str
            Name of controller
    """
    def inner(request: Request):
        return request.app.extra[f'{app_name}_controller']
    return inner

appController = requestController("app")

def post_message_handler(body, controller):
    """
    upload data from source
    """
    try:
        a = controller.getFile(body.message)
        logger.info("upload finished")
        return a
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Bad request {e}")

def upload_local_file_Handler(file,controller, body={"message":"hellp"}):
    """
    PostUploadFile
    """
    print("uploaddd", file,controller, body)
    try:
        
        with open("test.png", "wb") as f:
            f.write(file.file.read())
        a= controller.getFile(body["message"])
        return a
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Bad request {e}")

@app.get('/health')
async def healthCheck() -> ApiResponse:
    print("IM herer")
    logger.info("IMHERE")
    try:
      ...
    except Exception as e:
      raise HTTPException(status_code=400, detail="Bad request")
    return ApiResponse(code=status.HTTP_200_OK, type="bool", message="file uploaded")

@app.post('/message', response_class=FileResponse)
def post_message(body: PostMessage,
                controller: Controller = Depends(appController)):
    """
    Create a Document
    """
    try:
        time.sleep(5.0)
        return post_message_handler(body, controller)
    except Exception as e:
      raise HTTPException(status_code=400, detail=f"{e}")

@app.post(
    '/image',
    response_class=FileResponse
)
async def upload_local_file(
                            
                            message: str = Form(...),
                            filedata: UploadFile = File(...),
                            controller: Controller = Depends(appController)):
    """
    PostUploadFile
    """
    try:
        logger.info(f"{message}")
        print("Waiting for new file upload and body ", filedata)
        return upload_local_file_Handler(filedata, controller)
        
    except Exception as e:
      raise HTTPException(status_code=400, detail=f"{e}")

if __name__ == '__main__':
    try:
        APP_HOST= str(os.getenv("APP_HOST"))
        APP_PORT = int(os.getenv("APP_PORT"))
    except:
        APP_HOST = "0.0.0.0"
        APP_PORT = 9099
    logger.info(f"App host:port {APP_HOST}:{APP_PORT}")
    uvicorn.run("main:app", host=APP_HOST, port=APP_PORT, reload=True)
